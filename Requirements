NewBank Software App – Group 15 Functional and Non-Functional Requirements

Overview:
NewBank is an idea for a new disrupter bank where customers can interact with their accounts via a simple command-line interface. The originator of this idea has produced some basic client-server code as well as a protocol for sending commands and receiving responses from the NewBank server. The originator of the idea has asked your group to further develop their base code - specifically, implementing the protocol. However, the originator is also keen for input and your team can alter or add to the protocol to improve interaction with the NewBank server as well as to add new services. For example, the originator is keen for NewBank customers to be able to offer micro-loans to other NewBank customers in a micro-loan marketplace. You and a team of developers have taken up this challenge. Your team have access to the originators basic client-server code as well as the protocol for sending commands and receiving responses from the NewBank server. The originator has said that your group can add to, remove and/or alter any part of this basic code as well as the proposed protocol. Their only requirement is that customers have to interact via a command-line interface and that any changes/additions to the protocol are fully documented.

Functional Requirements

	FR1	The system shall allow users to register and use an account. (SIGNUP)
		
		FR1.1 An account shall have a name.
		
		FR1.2 An account shall have a password.
		
		FR1.3 An account shall have an ID number.
		
		FR1.4 An ID number shall consist of 7 digits.
		
		FR1.5 The system shall display an error message to users if name is already in use.
		
		FR1.6 The system shall add "Main" account as defualt.
	
	FR2	The system shall require users to login to use its features. (LOGIN)
	
		FR2.1 User shall have 3 attempts to login.
		
		FR2.2 After 3 attempts the system shall block the user account.

	FR3	The system shall allow users to change their password. (PASSWORDCHANGE)

	FR4	User shall be able to check its accounts balance. (SHOWMYACCOUNTS)

	FR5	User shall be able to deposit money. (DEPOSIT)

		FR5.1 User shall deposit money on its "Main" account.
		
		FR5.2 The system shall accept only correct amount.
		
	FR6	User shall be able to withdraw money. (WITHDRAW)
	
		FR6.1 User shall withdraw money from its "Main" account.
		
		FR6.2. User shall not withdraw more money that he has on his main account.
		
		FR6.3 The system shall accept only correct amount.

	FR7	User shall be able to move money between his accounts. (MOVE)
	
		FR7.1 User shall not move more money that he has on the source account.
		
		FR7.2 The system shall accept only correct amount to move.

	FR8	User shall be able to transfer money from his account to other user's account. (PAY)
	
		FR8.1 Pay function shall move money from user "Main" account to destination user "Main" account.
		
		FR8.2 User shall not transfer more money than he has on his "Main" account.
		
		FR8.3 The system shall accept only correct amount to transfer.

	FR9	Register as a lender function – allows user to register as a lender for bank’s microloan service
		FR9.1 The user must have the desired amount to loan in their main account

	FR10	User shall be able to register as a lender.
	
	FR11	User shall be able to borrow a loan from registered lenders.
	
		FR11.1 User shall be able to specify amount of the loan.
		
		FR11.2 User shall be able to choose from which lender he wants to take the loan.
		
		FR11.3 User shall specify for how long he wants to take the loan for.

	FR12	The system shall be able to show available lenders and loans. (SHOWMICROLENDERS)

	FR13    The user shall be able to repay the loan.

	FR14	User shall be able to log out of the system. (LOGOFF)
	
		FR14.1 User should be able to log off using "LOGOFF" function.
		
		FR14.2 After using "LOGOFF" function program should ask for User Name again.


Non-Functional Requirements

	NFR1	Users' passwords shall be secure.
		
		NFR1.1 Passwords should be hashed using secure algorithm.
	
	NFR2 	The system should be reliable.
	
		NFR2.1 The system should be available at least 23 hours a day.
		
		NFR2.2 Any downtime to the system should be limited to the hours betweeen 00:00 and 06:00.
		
	NFR3	The system shall be secure.
	
		NFR3.1 The system back up should be done at least one per day.
		
		NFR3.2 After 3 failed attempts to login, the system shall freeze the account.

